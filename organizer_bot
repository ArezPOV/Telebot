import requests
import re

import logging
import telebot
import pandas as pd
from telebot import types
from constants import TG_TOKEN

logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)


class User:
    def __init__(self, user_id, name, currency, balance):
        self.user_id = user_id
        self.name = name
        self.currency = currency
        self.balance = balance


def run_organizer_bot(token: str) -> None:
    """Run financial organizer bot that helps you to spend money wisely"""
    bot = telebot.TeleBot(token, parse_mode=None)
    user_dict = {}

    @bot.message_handler(commands=['help', 'start'])
    def welcome_screen(message):
        chat_id = message.chat.id
        user = User(user_id=message.from_user.id, name=message.from_user.first_name, currency=None, balance=None)
        user_dict[chat_id] = user
        save_user_data_to_file(user)

        welcome_sticker = open('images/leo.webp', 'rb')
        bot.send_sticker(message.chat.id, welcome_sticker)
        bot.send_message(message.chat.id, "Welcome, {0.first_name}!".format(message.from_user, bot.get_me()) +
                         "\nMy name is <b>{1.first_name}</b>.".format(message.from_user, bot.get_me()) +
                         "\nI'm here to help you spend money <b>wisely!</b>", parse_mode='html')
        bot.send_message(message.chat.id, "I'm a financial organizer. I can do a few things for now:")
        bot.send_message(message.chat.id, "1. Add and save your current financial data\n"
                                          "2. Gather information about your expenditures\n"
                                          "3. Analyze the collected data and provide information about " +
                         "significant expenses.\n"
                         "4. Offer advice on reducing expenses based on the gathered data.")
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        key_reg = types.KeyboardButton('/registration')
        markup.add(key_reg)
        bot.send_message(message.chat.id, "New user? Press <b>registration</b> to start", parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, add_currency)

    @bot.message_handler(commands=['registration'])
    def add_currency(message):
        try:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            key_usd = types.KeyboardButton('US Dollar ðŸ‡ºðŸ‡¸')
            key_eur = types.KeyboardButton('Euro ðŸ‡ªðŸ‡º')
            key_rub = types.KeyboardButton('Ruble ðŸ‡·ðŸ‡º')
            markup.add(key_usd, key_eur, key_rub)
            msg = bot.send_message(message.from_user.id, 'Your currency?', reply_markup=markup)
            bot.register_next_step_handler(msg, process_currency)

        except Exception as e:
            bot.reply_to(message, 'Something is wrong, write /start to start over!')

    def process_currency(message):
        try:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.currency = message.text
            msg = bot.send_message(chat_id, "Your balance? (Integer/float)")
            bot.register_next_step_handler(msg, base_balance)
            save_user_data_to_file(user)

        except Exception as e:
            bot.reply_to(message, 'Something is wrong, write /start to start over!')

    def base_balance(message):
        try:
            chat_id = message.chat.id
            user = user_dict[chat_id]

            if message.text.isdigit():
                user.balance = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                main_button = types.KeyboardButton(text='/menu')
                markup.add(main_button)
                bot.reply_to(message, "Thank you, now you can start to use me", reply_markup=markup)
                save_user_data_to_file(user)

        except Exception as e:
            bot.reply_to(message, 'Something is wrong, write /start to start over')

    def save_user_data_to_file(user):
        user_data = pd.DataFrame({
                'ID': [user.user_id],
                'Name': [user.name],
                'Currency': [user.currency],
                'Balance': [user.balance]
            })

        with pd.ExcelWriter("users.xlsx",
                            mode="a",
                            engine="openpyxl",
                            if_sheet_exists="overlay",
                            ) as writer:
            user_data.to_excel(writer, sheet_name="Users", header=False, startrow=1)

    @bot.message_handler(commands=['menu'])
    def main_menu(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        balance = types.InlineKeyboardButton(text='Balance', callback_data='balance')
        expenses = types.InlineKeyboardButton('Expenses')
        purchases = types.InlineKeyboardButton('Purchases')
        add_balance = types.InlineKeyboardButton('Add Money', callback_data='money')
        advice = types.InlineKeyboardButton('Advice')
        markup.add(balance, expenses, purchases, add_balance, advice)
        bot.send_message(message.chat.id, "Choose what to do next", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        chat_id = call.message.chat.id
        if chat_id in user_dict:
            user = user_dict[chat_id]
            if call.data == 'balance':
                bot.reply_to(call.message.chat.id, f'Your balance {user.balance} {user.currency}')
            else:
                bot.reply_to(call.message.chat.id, 'User data not found')
            if call.data == 'money':
                bot.send_message(call.message.chat.id, 'How much money you want to add?')
                if call.message.text.isdigit():
                    user.balance += call.message.text
                else:
                    bot.reply_to(call.message.chat.id, 'Something is wrong. Try again!')

    bot.enable_save_next_step_handlers(delay=2)
    bot.load_next_step_handlers()
    bot.infinity_polling()


if __name__ == '__main__':
    run_organizer_bot(TG_TOKEN)
