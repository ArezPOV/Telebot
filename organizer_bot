import time
import logging
import telebot
import pandas as pd
from telebot import types
from constants import TG_TOKEN

# –õ–æ–≥–≥–µ—Ä
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ú–µ–Ω—é
menu_keyboard = types.InlineKeyboardMarkup()
balance_btn = types.InlineKeyboardButton(text='Balance', callback_data='/balance')
add_btn = types.InlineKeyboardButton(text='Add Money', callback_data='/add')
expenses_btn = types.InlineKeyboardButton(text='Add Expenses', callback_data='/add_expenses')
all_exp_btn = types.InlineKeyboardButton(text='My Expenses', callback_data='/all_expenses')
advice_btn = types.InlineKeyboardButton(text='Advice', callback_data='/advice')
menu_keyboard.row(balance_btn, add_btn)
menu_keyboard.row(all_exp_btn, expenses_btn)
menu_keyboard.row(advice_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –†–∞—Å—Ö–æ–¥–æ–≤
expenses_keyboard = types.InlineKeyboardMarkup()
btn1 = types.InlineKeyboardButton('üè† Home', callback_data='home')
btn2 = types.InlineKeyboardButton('üöó Car', callback_data='car')
btn3 = types.InlineKeyboardButton('üçî Food', callback_data='food')
btn4 = types.InlineKeyboardButton('üéä Entertainment', callback_data='entertainment')
btn5 = types.InlineKeyboardButton('üóø Other', callback_data='other')
btn6 = types.InlineKeyboardButton('‚¨ÖÔ∏è Back', callback_data='back')
expenses_keyboard.row(btn1, btn2, btn3)
expenses_keyboard.row(btn4, btn5)
expenses_keyboard.row(btn6)

# Tinkoff URL –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
tink_keyboard = types.InlineKeyboardMarkup()
tink_btn = types.InlineKeyboardButton('Get a card', url='https://vsezaimyonline.ru/dcards/tinkoff-black')
tink_keyboard.add(tink_btn)

# Wells Fargo URL –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
wells_keyboard = types.InlineKeyboardMarkup()
wells_btn = types.InlineKeyboardButton('Get a card', url='https://creditcards.wellsfargo.com/cards/active-cash-credit'
                                                         '-card/?product_code=CC&subproduct_code=AC&FPID=0126D7IDF40000'
                                                         '&vendor_code=LS&sub_channel=AFF&siteID=SWlnSnn6x54-UerkoxhRXj'
                                                         'wxy.Dfo8iRow')
wells_keyboard.add(wells_btn)

# Revolut URL –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
revolut_keyboard = types.InlineKeyboardMarkup()
revolut_btn = types.InlineKeyboardButton('Get a card', url='https://www.revolut.com/en-NL/revolut-premium/')
revolut_keyboard.add(revolut_btn)


class User:
    def __init__(self, user_id, name, currency, balance):
        self.user_id = user_id
        self.name = name
        self.currency = currency
        self.balance = balance


class Expenses:
    def __init__(self, date, home, car, food, entertainment, other):
        self.date = date
        self.home = home
        self.car = car
        self.food = food
        self.entertainment = entertainment
        self.other = other


# –û–±—ä–µ–∫—Ç –†–∞—Å—Ö–æ–¥—ã. –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
expenses = Expenses(date=pd.Timestamp.now().date(), home=0, car=0, food=0, entertainment=0, other=0)
expenses_category = None


def run_organizer_bot(token: str) -> None:
    """Run financial organizer bot that helps you to spend money wisely"""
    bot = telebot.TeleBot(token, parse_mode=None)
    user_dict = {}
    expenses_dict = {}

    # –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    @bot.message_handler(commands=['start'])
    def welcome_screen(message):
        # –û–±—ä–µ–∫—Ç User. –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        # ID/Name - –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö process_currency –∏ base_balance.
        chat_id = message.chat.id
        user = User(user_id=message.from_user.id, name=message.from_user.first_name, currency=None, balance=None)
        user_dict[chat_id] = user

        welcome_sticker = open('images/leo.webp', 'rb')
        bot.send_sticker(message.chat.id, welcome_sticker)
        bot.send_message(message.chat.id, "Welcome, {0.first_name}!".format(message.from_user, bot.get_me()) +
                         "\nMy name is <b>{1.first_name}</b>.".format(message.from_user, bot.get_me()) +
                         "\nI'm here to help you spend money <b>wisely!</b>", parse_mode='html')
        bot.send_message(message.chat.id, "I'm a financial organizer. I can do a few things for now:")
        bot.send_message(message.chat.id, "1. Add and save your current financial data\n"
                                          "2. Gather information about your expenditures\n"
                                          "3. Analyze the collected data and provide information about " +
                         "significant expenses.\n"
                         "4. Offer advice on reducing expenses based on the gathered data.")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_keyboard = types.InlineKeyboardMarkup()
        reg_btn = types.InlineKeyboardButton(text='Registration', callback_data='registration')
        registration_keyboard.add(reg_btn)
        bot.send_message(message.chat.id, "New user? You need to <b>Sign up</b> first", parse_mode='html',
                         reply_markup=registration_keyboard)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö
    @bot.message_handler(content_types=['text'])
    # –ó–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å –í–∞–ª—é—Ç—ã (–ü–µ—Ä–≤—ã–π —à–∞–≥ callback_worker /registration)
    def process_currency(message):
        chat_id = message.chat.id
        user = user_dict[chat_id]
        if message.text in ['USD üá∫üá∏', 'EUR üá™üá∫', 'RUB üá∑üá∫']:
            user.currency = message.text
            msg = bot.send_message(chat_id, "Your balance? Integer/float (E.g. 500.20)")
            bot.register_next_step_handler(msg, base_balance)
        else:
            bot.send_message(chat_id, 'Input currency is wrong, write <b>/start</b> to try again',
                             parse_mode='html')

    # –ó–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å –ë–∞–ª–∞–Ω—Å–∞ (–í—Ç–æ—Ä–æ–π —à–∞–≥ callback_worker /registration)
    def base_balance(message):
        chat_id = message.chat.id
        user = user_dict[chat_id]

        if message.text.replace('.', '', 2).isdigit():
            balance = float(message.text)
            user.balance = balance

            success_sticker = open('images/success.webp', 'rb')
            bot.send_sticker(chat_id, success_sticker)
            bot.send_message(chat_id, "Thank you, now you can start to use me", reply_markup=menu_keyboard)

            save_user_data_to_file(user)
        else:
            bot.send_message(chat_id, 'Input balance not Integer or Float, write <b>/start</b> to try again',
                             parse_mode='html')

    # –í–†–ï–ú–ï–ù–ù–û –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ pandas –∏ excel. –ö–û–ü - –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ SQLite3
    def save_user_data_to_file(user):
        user_data = pd.DataFrame({
            'ID': [user.user_id],
            'Name': [user.name],
            'Currency': [user.currency],
            'Balance': [float(user.balance)]
        })

        with pd.ExcelWriter("users.xlsx",
                            mode="a",
                            engine="openpyxl",
                            if_sheet_exists="overlay",
                            ) as writer:
            user_data.to_excel(writer, sheet_name="Users", header=False, startrow=1)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (callback_worker /add)
    def process_balance(message):
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.balance = float(user.balance)  # –í–†–ï–ú–ï–ù–ù–û –¢–£–¢ –ò –î–ê–õ–ï–ï. Float –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ.

        if message.text.replace('.', '', 2).isdigit():
            user.balance += float(message.text)
            # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            bot.send_message(message.chat.id, f'New balance: {user.balance} {user.currency}',
                             reply_markup=menu_keyboard)
        else:
            bot.send_message(message.chat.id, 'Something is wrong, try again!')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (callback_worker /add_expenses)
    def process_expenses(message):
        global expenses
        global expenses_category
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.balance = float(user.balance)

        if message.text.replace('.', '', 2).isdigit():
            expense_amount = float(message.text)

            if expenses_category == 'home':
                expenses.home = expense_amount
                category_text = "üè† Home"
            elif expenses_category == 'car':
                expenses.car = expense_amount
                category_text = "üöó Car"
            elif expenses_category == 'food':
                expenses.food = expense_amount
                category_text = "üçî Food"
            elif expenses_category == 'entertainment':
                expenses.entertainment = expense_amount
                category_text = "üéä Entertainment"
            elif expenses_category == 'other':
                expenses.other = expense_amount
                category_text = "üóø Other"
            else:
                category_text = "Unknown"

            if category_text != "Unknown":
                # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞.
                if expense_amount < user.balance:
                    bot.send_message(message.from_user.id,
                                     f'Expenses added "{category_text}" : {expense_amount} {user.currency}')

                    user.balance -= expense_amount

                    # –£—Å–ª–æ–≤–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.
                    # –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
                    if user.user_id in expenses_dict:
                        expenses_dict[user.user_id][0]['date'] = pd.Timestamp.now().date()
                        expenses_dict[user.user_id][0]['home'] += expenses.home
                        expenses_dict[user.user_id][0]['car'] += expenses.car
                        expenses_dict[user.user_id][0]['food'] += expenses.food
                        expenses_dict[user.user_id][0]['entertainment'] += expenses.entertainment
                        expenses_dict[user.user_id][0]['other'] += expenses.other
                    else:
                        expenses_dict[user.user_id] = [{
                            'user_id': user.user_id,
                            'date': expenses.date,
                            'home': expenses.home,
                            'car': expenses.car,
                            'food': expenses.food,
                            'entertainment': expenses.entertainment,
                            'other': expenses.other
                        }]

                    save_expenses_data_to_file()
                    bot.send_message(message.from_user.id, f'Now your balance is: {user.balance} {user.currency}',
                                     reply_markup=menu_keyboard)
                else:
                    bot.send_message(message.from_user.id, 'Not enough funds in the account. '
                                                           f'You lack the funds to make the purchase: '
                                                           f'{user.balance - expense_amount}',
                                     reply_markup=menu_keyboard)
            else:
                bot.send_message(message.from_user.id, 'Unknown expense category.')
        else:
            bot.send_message(message.from_user.id, 'Please write a valid integer.')

    # –í–†–ï–ú–ï–ù–ù–û –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ pandas –∏ excel. –ö–û–ü - –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ SQLite3
    def save_expenses_data_to_file():
        global expenses
        current_date = pd.Timestamp.now().date()

        expenses_data = pd.DataFrame({
            'Date': current_date,
            'Home': [expenses.home],
            'Car': [expenses.car],
            'Food': [expenses.food],
            'Entertainment': [expenses.entertainment],
            'Other': [expenses.other]
        })

        with pd.ExcelWriter("users.xlsx",
                            mode="a",
                            engine="openpyxl",
                            if_sheet_exists="overlay",
                            ) as writer:
            expenses_data.to_excel(writer, sheet_name="Expenses", header=False, startrow=1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫
    @bot.callback_query_handler(func=lambda callback: True)
    def callback_worker(call):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
        if call.data == '/balance':
            chat_id = call.from_user.id
            user = user_dict[chat_id]
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç (–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é)
            markup = types.InlineKeyboardMarkup()
            y_advice = types.InlineKeyboardButton(text='Yes', callback_data='/advice')
            markup.row(y_advice)
            bot.send_message(call.from_user.id, f'Your balance: {user.balance} {user.currency}\n'
                                                f'Do you want an advice how to get more money?', reply_markup=markup)

            bot.send_message(call.from_user.id, 'Or continue:',
                             reply_markup=menu_keyboard)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.
        if call.data == '/add':
            open_vault = open('images/opening-vault.mp4', 'rb')
            msg = bot.send_animation(call.from_user.id, open_vault)
            bot.send_message(call.from_user.id, 'Opening vault...')
            time.sleep(2)
            bot.send_message(call.from_user.id, 'How much money you want to put into the vault?: ')
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞".
            bot.register_next_step_handler(msg, process_balance)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞.
        if call.data == '/advice':
            chat_id = call.from_user.id
            user = user_dict[chat_id]
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω—ã.
            # –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.
            if user.currency == 'USD üá∫üá∏':
                wells_pic = open('images/wells-fargo.jpeg')
                bot.send_sticker(call.from_user.id, wells_pic)
                bot.send_message(call.from_user.id,
                                 "The <b>Wells Fargo Active Cash¬Æ</b> Card is a credit card offered by Wells Fargo. "
                                 "It is known for its straightforward rewards program, offering unlimited 2% cashback "
                                 "on all purchases, making it suitable for those looking for a simple and consistent "
                                 "cashback earning experience. The card may also include other benefits such as cell "
                                 "phone protection and a 0% intro APR on purchases and balance transfers for a certain "
                                 "period, depending on the card's terms and conditions. It's a popular choice for "
                                 "individuals who want a no-fuss credit card with competitive cashback rewards.",
                                 parse_mode='html')

                bot.send_message(call.from_user.id, 'Pros:\n '
                                                    '‚Ä¢ Earn a $200 cash rewards bonus when you spend new price\n'
                                                    '‚Ä¢ $500 in purchases in the first 3 months\n'
                                                    '‚Ä¢ Earn unlimited 2% cash rewards on purchases',
                                 reply_markup=wells_keyboard)
                bot.send_message(call.from_user.id, 'Continue', reply_markup=menu_keyboard)

            if user.currency == 'EUR üá™üá∫':
                revolut_pic = open('images/revolut.jpeg')
                bot.send_sticker(call.from_user.id, revolut_pic)
                bot.send_message(call.from_user.id,
                                 'Revolut offers excellent opportunities for saving money while traveling, '
                                 'thanks to favorable exchange rates and no withdrawal fees at ATMs. Additionally, '
                                 'the platform provides additional services such as travel insurance and access to '
                                 'airport lounges. With Revolut, you can save money and make your travels more '
                                 'convenient and worry-free.')

                bot.send_message(call.from_user.id, "Pros:\n '"
                                                    "‚Ä¢ Unlimited foreign exchange Monday-Friday\n "
                                                    "‚Ä¢ Up to ¬£400 free international ATM withdrawals per month, and a "
                                                    "2% fee afterward\n "
                                                    "‚Ä¢ Full purchase protection up to ¬£2,500\n"
                                                    "‚Ä¢ Up to 5% cashback on accommodation\n"
                                                    "‚Ä¢ Up to 20% off fees on international transfers\n"
                                                    "‚Ä¢ Up to 2.34% interest paid into saving vaults daily "
                                                    "(depends on the currency)\n"
                                                    "‚Ä¢ 5 commission-free stock trades every month\n"
                                                    "‚Ä¢ Revolut Junior - can create cards for two children under "
                                                    "the age of 18\n"
                                                    "‚Ä¢ Perks Plus - higher discounts off top brands",
                                 reply_markup=revolut_keyboard)
                bot.send_message(call.from_user.id, 'Continue', reply_markup=menu_keyboard)

            if user.currency == 'RUB üá∑üá∫':
                tinkoff_pic = open('images/tinkoff-black', 'rb')
                bot.send_sticker(call.from_user.id, tinkoff_pic)
                bot.send_message(call.from_user.id,
                                 'The Tinkoff Black debit card is convenient for everyday purchases and other '
                                 'payments. Customers can choose up to four cashback categories, including a base '
                                 'cashback of 1%, once a month in the online bank or mobile app.')

                bot.send_message(call.from_user.id, 'Pros:\n '
                                                    'Free cash deposits up to 150,000 rubles at bank partners\n'
                                                    'Withdrawals at Tinkoff ATMs up to 500,000 rubles without a fee\n'
                                                    'Transfers via phone number using the fast payment system and to '
                                                    'Sberbank cards up to 20,000 rubles, free of charge\n'
                                                    'You can apply for issuance on the bank\'s website\n'
                                                    'The card will be delivered within 1-3 days',
                                 reply_markup=tink_keyboard)
                bot.send_message(call.from_user.id, 'Continue', reply_markup=menu_keyboard)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.
        if call.data == '/add_expenses':
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=expenses_keyboard)
            bot.send_message(call.from_user.id, 'Choose category:')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤. –í—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤.
        if call.data in ('home', 'car', 'food', 'entertainment', 'other'):
            global expenses_category
            chat_id = call.from_user.id
            user = user_dict[chat_id]
            expenses_category = call.data
            msg = bot.send_message(call.from_user.id, f'How much {user.currency} did you spend?:')
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞".
            bot.register_next_step_handler(msg, process_expenses)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.
        if call.data == '/all_expenses':
            user_id = call.from_user.id
            if user_id in expenses_dict:
                user_expenses = expenses_dict[user_id]
                if user_expenses:
                    expenses_text = "Your expenses:\n\n"
                    for expense_data in user_expenses:
                        date = expense_data['date']
                        home = expense_data['home']
                        car = expense_data['car']
                        food = expense_data['food']
                        entertainment = expense_data['entertainment']
                        other = expense_data['other']

                        expense_text = f"Date: {date}\n"
                        expense_text += f"üè† Home: {home}\n"
                        expense_text += f"üöó Car: {car}\n"
                        expense_text += f"üçî Food: {food}\n"
                        expense_text += f"üéä Entertainment: {entertainment}\n"
                        expense_text += f"üóø Other: {other}\n\n"

                        expenses_text += expense_text

                    bot.send_message(user_id, expenses_text)
                else:
                    bot.send_message(user_id, "You haven't added any expenses yet.")
            else:
                bot.send_message(call.from_user.id, "No expenses found for this user.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Back –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –†–∞—Å—Ö–æ–¥–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
        if call.data == 'back':
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=menu_keyboard)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Registration –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (/start).
        if call.data == 'registration':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            key_usd = types.KeyboardButton('USD üá∫üá∏')
            key_eur = types.KeyboardButton('EUR üá™üá∫')
            key_rub = types.KeyboardButton('RUB üá∑üá∫')
            markup.add(key_usd, key_eur, key_rub)
            msg = bot.send_message(call.message.chat.id, 'Your currency?', reply_markup=markup)
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞".
            bot.register_next_step_handler(msg, process_currency)

    # –ó–∞–ø–∏—Å—å –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–≥–æ–≤ –≤ –º–µ—Ç–æ–¥–µ register_next_step_handler
    bot.enable_save_next_step_handlers(delay=2)
    bot.load_next_step_handlers()

    bot.infinity_polling()


if __name__ == '__main__':
    run_organizer_bot(TG_TOKEN)
